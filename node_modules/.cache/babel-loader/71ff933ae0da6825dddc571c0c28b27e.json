{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n// This component uses the Render Prop Pattern to add the 'Cachette'\n// Component Behaviour to the Navigation Component...\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport _ from \"lodash\";\nimport { CachetteWrapper } from \"./styled\";\n\nvar CachetteNavigation =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CachetteNavigation, _Component);\n\n  function CachetteNavigation() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CachetteNavigation);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CachetteNavigation)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      lastScrollTop: 0,\n      delta: 5,\n      isNavVisible: !!_this.props.initVisible,\n      shouldNavVisible: !!_this.props.initVisible,\n      isScrolling: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"cachetteNode\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"startScroll\", function () {\n      _this.setState(function () {\n        return {\n          isScrolling: true\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"stopScroll\", function () {\n      _this.setState(function () {\n        return {\n          isScrolling: false\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"scrollTimerFn\", function (timer) {\n      if (timer !== null) {\n        clearTimeout(timer);\n\n        if (!_this.state.isScrolling) {\n          _this.startScroll();\n        }\n      }\n\n      timer = setTimeout(function () {\n        if (_this.state.isScrolling) {\n          _this.stopScroll();\n        }\n      }, 250);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkNavVisibility\", function () {\n      _this.checkPageScrolledPastTop();\n\n      if (_this.state.isScrolling) {\n        _this.hasScrolled();\n      }\n\n      _this.visibleCheckInterval = window.requestAnimationFrame(_this.checkNavVisibility);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkPageScrolledPastTop\", function () {\n      var scrollTop = window.pageYOffset !== undefined ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n\n      if (scrollTop >= _this.props.navHeight + 100) {\n        _this.setState({\n          shouldNavVisible: true\n        });\n      } else if (_this.props.initVisible) {\n        _this.setState({\n          shouldNavVisible: false\n        });\n      } else {\n        _this.setState({\n          shouldNavVisible: false,\n          isNavVisible: false\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(CachetteNavigation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // Add an Event Listener to listen for scroll Action\n      window.addEventListener(\"scroll\", function (timer) {\n        _this2.scrollTimerFn(timer);\n      }); // Check the NavVisibility...\n\n      window.requestAnimationFrame(this.checkNavVisibility);\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (this.state.lastScrollTop === nextState.lastScrollTop) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this3 = this;\n\n      window.removeEventListener(\"scroll\", function (timer) {\n        _this3.scrollTimerFn(timer);\n      });\n      window.cancelAnimationFrame(this.checkNavVisibility);\n    }\n    /**\n     * @function startScroll - Function to update state whenever the\n     * user starts scrolling...\n     */\n\n  }, {\n    key: \"hasScrolled\",\n\n    /**\n     * @function hasScrolled - Function to make state updates once the scroll action\n     * has been performed...\n     */\n    value: function hasScrolled() {\n      var scrollTop = window.pageYOffset !== undefined ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n\n      if (Math.abs(this.state.lastScrollTop - scrollTop) <= this.state.delta) {\n        return;\n      } // If User scrolled down and are past the navbar, set Visible to false\n      // This is necessary so you never see what is \"behind\" the navbar.\n\n\n      if (scrollTop > this.state.lastScrollTop && scrollTop > this.props.navHeight) {\n        // Scrolling Down\n        this.setState({\n          isNavVisible: false\n        });\n      } else if (scrollTop + window.innerHeight < document.body.clientHeight && this.state.shouldNavVisible) {\n        this.setState({\n          isNavVisible: true\n        });\n      } // Reset the LastScrollTop state to The current Scroll Position\n\n\n      this.setState({\n        lastScrollTop: scrollTop\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isNavVisible = this.state.isNavVisible;\n      var navHeight = this.props.navHeight;\n      return React.createElement(CachetteWrapper, {\n        ref: this.cachetteNode,\n        height: navHeight,\n        isNavVisible: isNavVisible\n      }, _.isFunction(this.props.navComponent) ? this.props.navComponent() : this.props.navComponent);\n    }\n  }]);\n\n  return CachetteNavigation;\n}(Component);\n\nexport { CachetteNavigation as default };\nCachetteNavigation.propTypes = {\n  initVisible: PropTypes.bool.isRequired,\n  navComponent: PropTypes.node.isRequired,\n  navHeight: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["/Users/iyk/Documents/sandbox/oddschecker-fe-ssr/src/components/navigation/components/cachette-navigation.js"],"names":["React","Component","PropTypes","_","CachetteWrapper","CachetteNavigation","lastScrollTop","delta","isNavVisible","props","initVisible","shouldNavVisible","isScrolling","createRef","setState","timer","clearTimeout","state","startScroll","setTimeout","stopScroll","checkPageScrolledPastTop","hasScrolled","visibleCheckInterval","window","requestAnimationFrame","checkNavVisibility","scrollTop","pageYOffset","undefined","document","documentElement","body","parentNode","navHeight","addEventListener","scrollTimerFn","nextProps","nextState","removeEventListener","cancelAnimationFrame","Math","abs","innerHeight","clientHeight","cachetteNode","isFunction","navComponent","propTypes","bool","isRequired","node","string"],"mappings":"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","sourcesContent":["// This component uses the Render Prop Pattern to add the 'Cachette'\n// Component Behaviour to the Navigation Component...\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport _ from \"lodash\";\nimport { CachetteWrapper } from \"./styled\";\n\nexport default class CachetteNavigation extends Component {\n  state = {\n    lastScrollTop: 0,\n    delta: 5,\n    isNavVisible: !!this.props.initVisible,\n    shouldNavVisible: !!this.props.initVisible,\n    isScrolling: false\n  };\n\n  // Declare Refs...\n  cachetteNode = React.createRef();\n\n  componentDidMount() {\n    // Add an Event Listener to listen for scroll Action\n    window.addEventListener(\"scroll\", timer => {\n      this.scrollTimerFn(timer);\n    });\n\n    // Check the NavVisibility...\n    window.requestAnimationFrame(this.checkNavVisibility);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.lastScrollTop === nextState.lastScrollTop) {\n      return false;\n    }\n    return true;\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"scroll\", timer => {\n      this.scrollTimerFn(timer);\n    });\n\n    window.cancelAnimationFrame(this.checkNavVisibility);\n  }\n\n  /**\n   * @function startScroll - Function to update state whenever the\n   * user starts scrolling...\n   */\n  startScroll = () => {\n    this.setState(() => ({\n      isScrolling: true\n    }));\n  };\n\n  /**\n   * @function stopScroll - Function to update state whenever the\n   * user stops scrolling\n   */\n  stopScroll = () => {\n    this.setState(() => ({\n      isScrolling: false\n    }));\n  };\n\n  /**\n   * @function scrollTimerFn - Timer function to handle scroll dampening and\n   * timeouts.\n   */\n  scrollTimerFn = timer => {\n    if (timer !== null) {\n      clearTimeout(timer);\n      if (!this.state.isScrolling) {\n        this.startScroll();\n      }\n    }\n    timer = setTimeout(() => {\n      if (this.state.isScrolling) {\n        this.stopScroll();\n      }\n    }, 250);\n  };\n\n  /**\n   * @function checkNavVisibility - Function to check if the window is scrolling.\n   * Calls @function hasScrolled\n   */\n  checkNavVisibility = () => {\n    this.checkPageScrolledPastTop();\n    if (this.state.isScrolling) {\n      this.hasScrolled();\n    }\n    this.visibleCheckInterval = window.requestAnimationFrame(\n      this.checkNavVisibility\n    );\n  };\n\n  /**\n   * @function checkPageScrolledPastTop - Function to check if the scroll Action has passed the top...\n   */\n  checkPageScrolledPastTop = () => {\n    const scrollTop =\n      window.pageYOffset !== undefined\n        ? window.pageYOffset\n        : (\n            document.documentElement ||\n            document.body.parentNode ||\n            document.body\n          ).scrollTop;\n    if (scrollTop >= this.props.navHeight + 100) {\n      this.setState({\n        shouldNavVisible: true\n      });\n    } else if (this.props.initVisible) {\n      this.setState({\n        shouldNavVisible: false\n      });\n    } else {\n      this.setState({\n        shouldNavVisible: false,\n        isNavVisible: false\n      });\n    }\n  };\n\n  /**\n   * @function hasScrolled - Function to make state updates once the scroll action\n   * has been performed...\n   */\n  hasScrolled() {\n    const scrollTop =\n      window.pageYOffset !== undefined\n        ? window.pageYOffset\n        : (\n            document.documentElement ||\n            document.body.parentNode ||\n            document.body\n          ).scrollTop;\n    if (Math.abs(this.state.lastScrollTop - scrollTop) <= this.state.delta) {\n      return;\n    }\n    // If User scrolled down and are past the navbar, set Visible to false\n    // This is necessary so you never see what is \"behind\" the navbar.\n    if (\n      scrollTop > this.state.lastScrollTop &&\n      scrollTop > this.props.navHeight\n    ) {\n      // Scrolling Down\n      this.setState({\n        isNavVisible: false\n      });\n    } else if (\n      scrollTop + window.innerHeight < document.body.clientHeight &&\n      this.state.shouldNavVisible\n    ) {\n      this.setState({\n        isNavVisible: true\n      });\n    }\n    // Reset the LastScrollTop state to The current Scroll Position\n    this.setState({\n      lastScrollTop: scrollTop\n    });\n  }\n\n  render() {\n    const { isNavVisible } = this.state;\n    const { navHeight } = this.props;\n    return (\n      <CachetteWrapper\n        ref={this.cachetteNode}\n        height={navHeight}\n        isNavVisible={isNavVisible}>\n        {_.isFunction(this.props.navComponent)\n          ? this.props.navComponent()\n          : this.props.navComponent}\n      </CachetteWrapper>\n    );\n  }\n}\n\nCachetteNavigation.propTypes = {\n  initVisible: PropTypes.bool.isRequired,\n  navComponent: PropTypes.node.isRequired,\n  navHeight: PropTypes.string.isRequired\n};\n"]},"metadata":{},"sourceType":"module"}