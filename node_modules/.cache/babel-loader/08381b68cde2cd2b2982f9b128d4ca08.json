{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nimport { InvalidArgumentsError } from \"./error-handler\";\nimport urls from \"../config/url\";\n/**\n * Get all game info from provided site and competition\n *\n * @param {string} website\n * @param {string} competition\n *\n * @returns {object}\n */\n\nexport var getAllGamesInfo =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(website, competition) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n\n            if (!(website && competition)) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 4;\n            return axios.get(\"\".concat(urls.main_base_url, \"/\").concat(website, \"/\").concat(competition));\n\n          case 4:\n            response = _context.sent;\n            console.log(response);\n            return _context.abrupt(\"return\", response);\n\n          case 7:\n            throw new InvalidArgumentsError(\"Website and Competition info not provided\");\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n            return _context.abrupt(\"return\", _context.t0);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 10]]);\n  }));\n\n  return function getAllGamesInfo(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Get Bet9ja games info.\n *\n * @param {string} competition\n * @returns {object}\n */\n\nexport var getBet9jaGamesInfo =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(competition) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n\n            if (!competition) {\n              _context2.next = 6;\n              break;\n            }\n\n            _context2.next = 4;\n            return axios.get(\"\".concat(urls.bet9ja, \"/\").concat(competition));\n\n          case 4:\n            response = _context2.sent;\n            return _context2.abrupt(\"return\", response);\n\n          case 6:\n            throw new InvalidArgumentsError(\"Website and Competition info not provided\");\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n            return _context2.abrupt(\"return\", _context2.t0);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 9]]);\n  }));\n\n  return function getBet9jaGamesInfo(_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n/**\n * Get Bet9ja games info.\n *\n * @param {string} competition\n * @returns {object}\n */\n\nexport var getMerryBetGamesInfo =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(competition) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n\n            if (!competition) {\n              _context3.next = 6;\n              break;\n            }\n\n            _context3.next = 4;\n            return axios.get(\"\".concat(urls.bet9ja, \"/\").concat(competition));\n\n          case 4:\n            response = _context3.sent;\n            return _context3.abrupt(\"return\", response);\n\n          case 6:\n            throw new InvalidArgumentsError(\"Website and Competition info not provided\");\n\n          case 9:\n            _context3.prev = 9;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log(_context3.t0);\n            return _context3.abrupt(\"return\", _context3.t0);\n\n          case 13:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 9]]);\n  }));\n\n  return function getMerryBetGamesInfo(_x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n/**\n * Get Bet9ja games info.\n *\n * @param {string} competition\n * @returns {object}\n */\n\nexport var getSureBetGamesInfo =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(competition) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n\n            if (!competition) {\n              _context4.next = 6;\n              break;\n            }\n\n            _context4.next = 4;\n            return axios.get(\"\".concat(urls.bet9ja, \"/\").concat(competition));\n\n          case 4:\n            response = _context4.sent;\n            return _context4.abrupt(\"return\", response);\n\n          case 6:\n            throw new InvalidArgumentsError(\"Website and Competition info not provided\");\n\n          case 9:\n            _context4.prev = 9;\n            _context4.t0 = _context4[\"catch\"](0);\n            console.log(_context4.t0);\n            return _context4.abrupt(\"return\", _context4.t0);\n\n          case 13:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[0, 9]]);\n  }));\n\n  return function getSureBetGamesInfo(_x5) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/iyk/Documents/sandbox/oddschecker-fe-ssr/api/website-odds-service.js"],"names":["axios","InvalidArgumentsError","urls","getAllGamesInfo","website","competition","get","main_base_url","response","console","log","getBet9jaGamesInfo","bet9ja","getMerryBetGamesInfo","getSureBetGamesInfo"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,qBAAT;AAEA,OAAOC,IAAP;AAEA;;;;;;;;;AASA,OAAO,IAAMC,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAOC,OAAP,EAAgBC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,kBAEvBD,OAAO,IAAIC,WAFY;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGFL,KAAK,CAACM,GAAN,WAClBJ,IAAI,CAACK,aADa,cACIH,OADJ,cACeC,WADf,EAHE;;AAAA;AAGnBG,YAAAA,QAHmB;AAMzBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AANyB,6CAOlBA,QAPkB;;AAAA;AAAA,kBAWrB,IAAIP,qBAAJ,CACJ,2CADI,CAXqB;;AAAA;AAAA;AAAA;AAe3BQ,YAAAA,OAAO,CAACC,GAAR;AAf2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfP,eAAe;AAAA;AAAA;AAAA,GAArB;AAoBP;;;;;;;AAMA,OAAO,IAAMQ,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,kBAAMN,WAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,iBAE1BA,WAF0B;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGLL,KAAK,CAACM,GAAN,WAAaJ,IAAI,CAACU,MAAlB,cAA4BP,WAA5B,EAHK;;AAAA;AAGtBG,YAAAA,QAHsB;AAAA,8CAIrBA,QAJqB;;AAAA;AAAA,kBAQxB,IAAIP,qBAAJ,CACJ,2CADI,CARwB;;AAAA;AAAA;AAAA;AAY9BQ,YAAAA,OAAO,CAACC,GAAR;AAZ8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlBC,kBAAkB;AAAA;AAAA;AAAA,GAAxB;AAiBP;;;;;;;AAMA,OAAO,IAAME,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,kBAAMR,WAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,iBAE5BA,WAF4B;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGPL,KAAK,CAACM,GAAN,WAAaJ,IAAI,CAACU,MAAlB,cAA4BP,WAA5B,EAHO;;AAAA;AAGxBG,YAAAA,QAHwB;AAAA,8CAIvBA,QAJuB;;AAAA;AAAA,kBAQ1B,IAAIP,qBAAJ,CACJ,2CADI,CAR0B;;AAAA;AAAA;AAAA;AAYhCQ,YAAAA,OAAO,CAACC,GAAR;AAZgC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAApBG,oBAAoB;AAAA;AAAA;AAAA,GAA1B;AAiBP;;;;;;;AAMA,OAAO,IAAMC,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,kBAAMT,WAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,iBAE3BA,WAF2B;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGNL,KAAK,CAACM,GAAN,WAAaJ,IAAI,CAACU,MAAlB,cAA4BP,WAA5B,EAHM;;AAAA;AAGvBG,YAAAA,QAHuB;AAAA,8CAItBA,QAJsB;;AAAA;AAAA,kBAQzB,IAAIP,qBAAJ,CACJ,2CADI,CARyB;;AAAA;AAAA;AAAA;AAY/BQ,YAAAA,OAAO,CAACC,GAAR;AAZ+B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAnBI,mBAAmB;AAAA;AAAA;AAAA,GAAzB","sourcesContent":["import axios from \"axios\";\nimport { InvalidArgumentsError } from \"./error-handler\";\n\nimport urls from \"../config/url\";\n\n/**\n * Get all game info from provided site and competition\n *\n * @param {string} website\n * @param {string} competition\n *\n * @returns {object}\n */\n\nexport const getAllGamesInfo = async (website, competition) => {\n  try {\n    if (website && competition) {\n      const response = await axios.get(\n        `${urls.main_base_url}/${website}/${competition}`\n      );\n      console.log(response);\n      return response;\n    }\n\n    // This is thrown if the necessary website or competition isn't provided\n    throw new InvalidArgumentsError(\n      \"Website and Competition info not provided\"\n    );\n  } catch (err) {\n    console.log(err);\n    return err;\n  }\n};\n\n/**\n * Get Bet9ja games info.\n *\n * @param {string} competition\n * @returns {object}\n */\nexport const getBet9jaGamesInfo = async competition => {\n  try {\n    if (competition) {\n      const response = await axios.get(`${urls.bet9ja}/${competition}`);\n      return response;\n    }\n\n    // This is thrown if the necessary website or competition isn't provided\n    throw new InvalidArgumentsError(\n      \"Website and Competition info not provided\"\n    );\n  } catch (err) {\n    console.log(err);\n    return err;\n  }\n};\n\n/**\n * Get Bet9ja games info.\n *\n * @param {string} competition\n * @returns {object}\n */\nexport const getMerryBetGamesInfo = async competition => {\n  try {\n    if (competition) {\n      const response = await axios.get(`${urls.bet9ja}/${competition}`);\n      return response;\n    }\n\n    // This is thrown if the necessary website or competition isn't provided\n    throw new InvalidArgumentsError(\n      \"Website and Competition info not provided\"\n    );\n  } catch (err) {\n    console.log(err);\n    return err;\n  }\n};\n\n/**\n * Get Bet9ja games info.\n *\n * @param {string} competition\n * @returns {object}\n */\nexport const getSureBetGamesInfo = async competition => {\n  try {\n    if (competition) {\n      const response = await axios.get(`${urls.bet9ja}/${competition}`);\n      return response;\n    }\n\n    // This is thrown if the necessary website or competition isn't provided\n    throw new InvalidArgumentsError(\n      \"Website and Competition info not provided\"\n    );\n  } catch (err) {\n    console.log(err);\n    return err;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}