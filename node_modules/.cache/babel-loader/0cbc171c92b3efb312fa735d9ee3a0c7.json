{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n// This component uses the Render Prop Pattern to add the 'Cachette'\n// Component Behaviour to the Navigation Component...\nimport React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport { CachetteWrapper } from \"./styled\";\n\nvar CachetteNavigation =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CachetteNavigation, _Component);\n\n  function CachetteNavigation() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CachetteNavigation);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CachetteNavigation)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      lastScrollTop: 0,\n      delta: 5,\n      isNavVisible: !!_this.props.initVisible,\n      shouldNavVisible: !!_this.props.initVisible,\n      isScrolling: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"cachetteNode\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"startScroll\", function () {\n      _this.setState(function () {\n        return {\n          isScrolling: true\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"stopScroll\", function () {\n      _this.setState(function () {\n        return {\n          isScrolling: false\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"scrollTimerFn\", function (timer) {\n      if (timer !== null) {\n        clearTimeout(timer);\n\n        if (!_this.state.isScrolling) {\n          _this.startScroll();\n        }\n      }\n\n      timer = setTimeout(function () {\n        if (_this.state.isScrolling) {\n          _this.stopScroll();\n        }\n      }, 250);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkNavVisibility\", function () {\n      _this.checkPageScrolledPastTop();\n\n      if (_this.state.isScrolling) {\n        _this.hasScrolled();\n      }\n\n      _this.visibleCheckInterval = window.requestAnimationFrame(_this.checkNavVisibility);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkPageScrolledPastTop\", function () {\n      var scrollTop = window.pageYOffset !== undefined ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n\n      if (scrollTop >= _this.props.navHeight + 100) {\n        _this.setState({\n          shouldNavVisible: true\n        });\n      } else if (_this.props.initVisible) {\n        _this.setState({\n          shouldNavVisible: false\n        });\n      } else {\n        _this.setState({\n          shouldNavVisible: false,\n          isNavVisible: false\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(CachetteNavigation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // Add an Event Listener to listen for scroll Action\n      window.addEventListener(\"scroll\", function (timer) {\n        _this2.scrollTimerFn(timer);\n      }); // Check the NavVisibility...\n\n      window.requestAnimationFrame(this.checkNavVisibility);\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (this.state.lastScrollTop === nextState.lastScrollTop) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this3 = this;\n\n      window.removeEventListener(\"scroll\", function (timer) {\n        _this3.scrollTimerFn(timer);\n      });\n      window.cancelAnimationFrame(this.checkNavVisibility);\n    }\n    /**\n     * @function startScroll - Function to update state whenever the\n     * user starts scrolling...\n     */\n\n  }, {\n    key: \"hasScrolled\",\n\n    /**\n     * @function hasScrolled - Function to make state updates once the scroll action\n     * has been performed...\n     */\n    value: function hasScrolled() {\n      var scrollTop = window.pageYOffset !== undefined ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n\n      if (Math.abs(this.state.lastScrollTop - scrollTop) <= this.state.delta) {\n        return;\n      } // If User scrolled down and are past the navbar, set Visible to false\n      // This is necessary so you never see what is \"behind\" the navbar.\n\n\n      if (scrollTop > this.state.lastScrollTop && scrollTop > this.props.navHeight) {\n        // Scrolling Down\n        this.setState({\n          isNavVisible: false\n        });\n      } else if (scrollTop + window.innerHeight < document.body.clientHeight && this.state.shouldNavVisible) {\n        this.setState({\n          isNavVisible: true\n        });\n      } // Reset the LastScrollTop state to The current Scroll Position\n\n\n      this.setState({\n        lastScrollTop: scrollTop\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isNavVisible = this.state.isNavVisible;\n      var navHeight = this.props.navHeight;\n      return React.createElement(CachetteWrapper, {\n        ref: this.cachetteNode,\n        height: navHeight,\n        isNavVisible: isNavVisible\n      }, _.isFunction(this.props.navComponent) ? this.props.navComponent() : this.props.navComponent);\n    }\n  }]);\n\n  return CachetteNavigation;\n}(Component);\n\nexport { CachetteNavigation as default };","map":null,"metadata":{},"sourceType":"module"}